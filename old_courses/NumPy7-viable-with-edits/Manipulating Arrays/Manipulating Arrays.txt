#NumPy: Manipulating Arrays
#Manipulating Arrays

#### Module Overview 
 In this module on Manipulating Arrays, we'll discuss Manipulating Arrays. 

 Learning Objectives: 

-  Discuss how to manipulate arrays in NumPy. 

-  Learn how to create arrays using NumPy. 

-  Learn how to manipulate arrays using NumPy. 

-  Learn about the various things we can do with arrays using NumPy. 

-  Learn about the many features and functions NumPy has to offer. 

-  Learn about the various ways we can access information in arrays using NumPy. 

-  Learn about how to use NumPy to make calculations on arrays. 

-  Learn about how to use NumPy to make plots. 

-  Learn about how to use NumPy to load and save data. 

-  Learn about how to use NumPy to work with images. 
 
#### Creating NumPy Arrays 

 We'll start by discussing how to create arrays in NumPy. We can create NumPy arrays using the array() function. This function takes in a list as input and returns a NumPy array. Let's see how this works: 

```python
import numpy as np

arr = np.array([1, 2, 3, 4, 5])
print(arr)

# [1 2 3 4 5]
```
 
 We can also specify the data type of the array when we create it. To do this, we'll use the dtype parameter. We can set this parameter to any data type we want. For example, we can set it to np.int32, np.float64, or np.complex128. Let's see how this works: 

```python
import numpy as np

arr = np.array([1, 2, 3, 4, 5], dtype=np.float64)
print(arr)

# [1. 2. 3. 4. 5.]
```
 
 We can also create multidimensional arrays using the array() function. To do this, we'll pass in a nested list as input. For example, we can create a two-dimensional array using the following code: 

```python
import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6]])
print(arr)

# [[1 2 3]
#  [4 5 6]]
```
 
 We can also create higher-dimensional arrays. Let's create a three-dimensional array: 

```python
import numpy as np

arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
print(arr)

# [[[ 1  2  3]
#   [ 4  5  6]]
# 
#  [[ 7  8  9]
#   [10 11 12]]]
```
 
 We can also use the zeros() function to create NumPy arrays filled with zeros. This function takes in the shape of the array as input and returns a NumPy array filled with zeros with the specified shape. For example, we can create a NumPy array with shape (3, 4) using the following code: 

```python
import numpy as np

arr = np.zeros((3, 4))
print(arr)

# [[0. 0. 0. 0.]
#  [0. 0. 0. 0.]
#  [0. 0. 0. 0.]]
```
 
 We can also use the ones() function to create NumPy arrays filled with ones. This function takes in the shape of the array as input and returns a NumPy array filled with ones with the specified shape. For example, we can create a NumPy array with shape (2, 3) using the following code: 

```python
import numpy as np

arr = np.ones((2, 3))
print(arr)

# [[1. 1. 1.]
#  [1. 1. 1.]]
```
 
 We can also use the full() function to create NumPy arrays filled with a specified value. This function takes in the shape of the array as input, as well as the value to fill the array with, and returns a NumPy array filled with the specified value with the specified shape. For example, we can create a NumPy array with shape (3, 4) filled with the value 7 using the following code: 

```python
import numpy as np

arr = np.full((3, 4), 7)
print(arr)

