#NumPy: Aggregation and Statistics
#Aggregation and Statistics

#### Module Overview 
 In this module on Aggregation and Statistics, we'll discuss Aggregation and Statistics. 

 Learning Objectives: 

- 
- 
- 

##### Module Contents:  
- [Overview of Python Numpy's Aggregation functions](#overview-of-python-numpys-aggregation-functions)
- [Overview of Python's Statistics functions](#overview-of-pythons-statistics-functions)
- [Exercises](#exercises)
- [Summary](#summary)

----------------

<a id='overview-of-python-numpys-aggregation-functions'></a>
## Overview of Python NumPy's Aggregation Functions
Numpy has a number of aggregation functions available(e.g. `sum`, `mean`, `median`, `std`, `var` etc)

As we've seen before, we can use the `.sum()` method to calculate the sum of an ndarray, but we can also use the numpy `sum` function:

```python
import numpy as np

# Let's create a 3 dimensional array
arr = np.arange(24).reshape((3,4,2))
arr

# sum of all elements in arr
arr.sum()

# sum of all elements in arr
np.sum(arr) # same as arr.sum()

# sum of all elements in arr in a given dimension
arr.sum(axis=0)

# sum of all elements in arr in a given dimension
np.sum(arr, axis=0) # same as arr.sum(axis=0)

# sum of all elements in arr in a given dimension
arr.sum(axis=1)

# sum of all elements in arr in a given dimension
np.sum(arr, axis=1) # same as arr.sum(axis=1)

# sum of all elements in arr in a given dimension
arr.sum(axis=2)

# sum of all elements in arr in a given dimension
np.sum(arr, axis=2) # same as arr.sum(axis=2)
```

As we just saw, `sum` can be used to calculate the sum of the elements in a given ndarray. The `mean`, `median`, `std`, `var` etc. functions can be similarly used to calculate the corresponding statistical measures of the elements in a given ndarray.

```python
import numpy as np

arr = np.arange(24).reshape((3,4,2))
arr

# mean of all elements of an array
arr.mean()

# mean of all elements of an array
np.mean(arr)

# mean of all elements of an array in a given dimension
arr.mean(axis=0)

# mean of all elements of an array in a given dimension
np.mean(arr, axis=0) 

# mean of all elements of an array in a given dimension
arr.mean(axis=1)

# mean of all elements of an array in a given dimension
np.mean(arr, axis=1) 

# mean of all elements of an array in a given dimension
arr.mean(axis=2)

# mean of all elements of an array in a given dimension
np.mean(arr, axis=2) 
```

```python
import numpy as np

arr = np.arange(24).reshape((3,4,2))
arr

# median of all elements of an array
arr.median() 

# median of all elements of an array
np.median(arr) # same as arr.median()

# median of all elements of an array in a given dimension
arr.median(axis=0)

# median of all elements of an array in a given dimension
np.median(arr, axis=0) # same as arr.median(axis=0)

# median of all elements of an array in a given dimension
arr.median(axis=1)

# median of all elements of an array in a given dimension
np.median(arr, axis=1) # same as arr.median(axis=1)

# median of all elements of an array in a given dimension
arr.median(axis=2)

# median of all elements of an array in a given dimension
np.median(arr, axis=2) # same as arr.median(axis=2)
```

```python
import numpy as