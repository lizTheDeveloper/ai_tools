#NumPy: NumPy with SciPy
#NumPy with SciPy

#### Module Overview 
 In this module on NumPy with SciPy, we'll discuss NumPy with SciPy. 

 Learning Objectives: 

-  Learn about the NumPy with SciPy module.
-  Learn about the different types of arrays that are available in NumPy with SciPy.
-  Learn about how to index and slice arrays in NumPy with SciPy.
-  Learn about how to use NumPy with SciPy to perform mathematical operations on arrays.

##### NumPy with SciPy Overview
 NumPy with SciPy is a Python module that provides numerical computing tools. NumPy with SciPy is built on top of the NumPy module and adds a number of features, including:

-  Linear algebra
-  Fourier transforms
-  Optimization
-  Statistics

In this module, we'll focus on NumPy with SciPy arrays, which are similar to NumPy arrays, but have some additional features.

##### Creating NumPy with SciPy Arrays
 NumPy with SciPy arrays can be created from Python lists or tuples, or from other NumPy with SciPy arrays.

**List to NumPy with SciPy Array:**

```
>>> import numpy as np
>>> a = np.array([1, 2, 3])
>>> a
array([1, 2, 3])
```

**Tuple to NumPy with SciPy Array:**

```
>>> import numpy as np
>>> a = np.array((1, 2, 3))
>>> a
array([1, 2, 3])
```

**NumPy with SciPy Array to NumPy with SciPy Array:**

```
>>> import numpy as np
>>> a = np.array([1, 2, 3])
>>> b = np.array(a)
>>> b
array([1, 2, 3])
```

##### Types of NumPy with SciPy Arrays
 NumPy with SciPy arrays can be of different types, including:

-  int
-  float
-  complex
-  bool
-  object
-  string

The type of an array can be accessed using the .dtype attribute:

```
>>> import numpy as np
>>> a = np.array([1, 2, 3])
>>> a.dtype
dtype('int64')
```

The type of an array can be changed using the .astype() method:

```
>>> import numpy as np
>>> a = np.array([1, 2, 3])
>>> a.astype(float)
array([ 1.,  2.,  3.])
```

##### NumPy with SciPy Array Indexing and Slicing
 NumPy with SciPy arrays can be indexed and sliced like regular Python lists.

**Indexing:**

```
>>> import numpy as np
>>> a = np.array([1, 2, 3, 4, 5])
>>> a[2]
3
>>> a[-1]
5
```

**Slicing:**

```
>>> import numpy as np
>>> a = np.array([1, 2, 3, 4, 5])
>>> a[1:3]
array([2, 3])
>>> a[:3]
array([1, 2, 3])
>>> a[3:]
array([4, 5])
```

##### NumPy with SciPy Array Operations
 NumPy with SciPy arrays can be used to perform mathematical operations.

**Addition:**

```
>>> import numpy as np
>>> a = np.array([1, 2, 3, 4, 5])
>>> b = np.array([5, 4, 3, 2, 1])
>>> a + b
array([6, 6, 6, 6, 6])
```

**Subtraction:**

```
>>> import numpy as np
>>> a = np.array([1, 2, 3, 4, 5])
>>> b = np.array([5, 4, 3, 2, 1])
>>> a - b
array([-4, -2,  0,  2,  4])
```

**Multiplication:**

```
>>> import numpy as np
>>> a = np.array([1, 2, 3, 4, 5])
>>> b = np.array([5, 4, 3, 2, 1])
>>> a * b
array([ 5,  8,  9,  8,  5])
```

**Division:**

```
>>> import numpy